AWSTemplateFormatVersion: "2010-09-09"
Description: SAP Data Hub on Amazon EKS (qp-1pabejknt)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - RemoteAccessCIDR
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
      - Label:
          default: EKS configuration
        Parameters:
          - EKSClusterName
          - KubernetesVersion
          - SDHIAMProfile
          - SDHIAMRole
          - SDHIAMRoleArn
      - Label:
          default: SDH Installation Host configuration
        Parameters:
          - SDHInstall
          - SDHVersion
          - SDHSwS3BucketName
          - SDHSwS3PrefixName
          - SDHEcrRepo
          - SDHSUserId
          - SDHSUserPass
          - SDHVoraPass
          - SDHSUserType
          - SDHCheckPointS3Bucket
          - SDHS3AccessKey
          - SDHS3SecretAccessKey
          - SDHNameSpace
          - SDHCertDomainName
          - SDHELBPrivatePublic
          - NodeInstanceTypeSDH
          - NodeVolumeSizeSDH
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      EKSClusterName:
        default: EKS Cluster Name
      KeyPairName:
        default: SSH key name
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      RemoteAccessCIDR:
        default: Allowed external access CIDR for your SDH Installation Host
      NodeInstanceTypeSDH:
        default: SDH Installation Host instance type
      SDHIAMProfile:
        default: Name of an existing IAM Profile with rights to access EKS cluster
      SDHIAMRole:
        default: Name of an existing IAM Role with rights to access EKS cluster
      SDHIAMRoleArn:
        default: ARN of an existing IAM Role with rights to access EKS cluster
      NumberOfNodes:
        default: Number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSizeSDH:
        default: Node volume size
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      VPCID:
        default: VPC ID
      KubernetesVersion:
        default: Kubernetes version
      SDHInstall:
        default: Install the SAP Data Hub?
      SDHVersion:
        default: SAP Data Hub version
      SDHCheckPointS3Bucket:
        default: S3 Bucket name of SAP Data Hub CheckPoint store
      SDHSwS3BucketName:
        default: S3 Bucket name of SAP Data Hub s/w
      SDHSwS3PrefixName:
        default: S3 Prefix name of SAP Data Hub s/w
      SDHEcrRepo:
        default: Create AWS ECR repo for SAP Data Hub
      SDHELBPrivatePublic:
        default: Create Private or Public ELB for SAP Data Hub
      SDHNameSpace:
        default: Kubernetes Name Space for your SAP Data Hub system
      SDHSUserId:
        default: SAP S-User Id.
      SDHSUserPass:
        default: SAP S-User Password
      SDHVoraPass:
        default: SAP Data Hub Vora user's Password
      SDHSUserType:
        default: SAP S-User type 
      SDHS3AccessKey:
        default: AWS IAM Access Key for S3 Checkpoint Bucket
      SDHS3SecretAccessKey:
        default: AWS IAM Secret Access Key for S3 Checkpoint Bucket
      SDHCertDomainName:
        default: SAP Data Hub Domain Name
Parameters:
  EKSClusterName:
    Description: The name of an existing EKS Cluster
    Type: String
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you
      to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  NodeInstanceTypeSDH:
    Default: r4.xlarge
    AllowedValues:
      - t2.2xlarge
      - t3.2xlarge
      - m4.2xlarge
      - m5.2xlarge
      - i3.xlarge
      - r3.xlarge
      - r4.xlarge
      - r4.2xlarge
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the SDH Installation Host instance
    Type: String
  NodeVolumeSizeSDH:
    Default: 40
    Description: Size for SDH Installation Host root EBS volumes
    Type: String
  SDHIAMProfile:
    Description: IAM instance profile with permissions to access the EKS cluster
    Type: String
  SDHIAMRole:
    Description: IAM instance role with permissions to access the EKS cluster
    Type: String
  SDHIAMRoleArn:
    Description: ARN of IAM instance role with permissions to access the EKS cluster
    Type: String
  VPCID:
    Type: "AWS::EC2::VPC::Id"
    Description: The ID of your existing VPC (e.g., vpc-0343606e)
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: The ID of the private subnet in an Availability Zone in your existing VPC (e.g., subnet-fe9a8b32)
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.12", "1.11", "1.10" ]
    Default: "1.11"
    Description: Your existing EKS version
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart-sk
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-sap-datahub-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the SDH instances. We recommend that you set this value to a trusted IP range.
    Type: String
  SDHInstall:
    Type: String
    Description: "Do you want to run the SDH installation? Setting to false will provision everthing and get ready for a manual installation."
    AllowedValues: [true, false]
    Default: true
  SDHVersion:
    Type: String
    AllowedValues: [ "2.5", "2.4", "2.4.1" ]
    Description: Version of SAP Data Hub deployed in the Amazon EKS cluster. **NOTE**, SDH 2.4 is *NOT* compatible with EKS 1.11. See SAP Note "#2686169"
    Default: "2.4.1"
  SDHCheckPointS3Bucket:
    Type: String
    Description: The name of your *existing* S3 bucket where your SAP Data Hub CheckPoint will be stored. Do *NOT* include s3:// (use just your bucket name)
    Default: "my-sdh-checkpoint"
  SDHSwS3BucketName:
    Type: String
    Description: The name of your S3 bucket where your SAP Data Hub software is stored. Do *NOT* include s3:// (use just your bucket name)
    Default: "my-sdh-bucket"
  SDHSwS3PrefixName:
    Type: String
    Description: The name of your S3 key prefix where your SAP Data Hub software is stored.
    Default: my/sw/version/
  SDHEcrRepo:
    Type: String
    Description: "AWS ECR repo to store your SAP Data Hub images. If set to *true*, the repos will be created for you. Set to *false* if you've already created the AWS ECR repos."
    AllowedValues: [true, false]
    Default: true
  SDHELBPrivatePublic:
    Type: String
    Description: "AWS ELB type for your SAP Data Hub Ingress. If set to *PRIVATE*, an ELB is created in your private subnet. If *PUBLIC*, an ELB is created in your public subnet."
    AllowedValues: [PRIVATE, PUBLIC]
    Default: PRIVATE
  SDHNameSpace:
    Type: String
    Description: Your SAP Data Hub kubernetes Name Space
    Default: "datahub"
  SDHSUserId:
    Type: String
    Description: Your SAP SWDC login name
    Default: "S0123456789"
  SDHSUserPass:
    Type: String
    NoEcho: true
    Description: The password for your S-User. This is needed for the SDH Installation only and it not kept after being used.
  SDHVoraPass:
    Type: String
    NoEcho: true
    Description: The password for the Vora user in your SAP Data Hub system.
  SDHSUserType:
    Type: String
    AllowedValues: [ "S", "T" ]
    Description: Type of S-user in the SAP Docker Repository. (S=S-user, T=Technical-user)
    Default: "S"
  SDHS3AccessKey:
    Type: String
    NoEcho: true
    Description: The AWS IAM Access Key for your S3 Vora Checkpoint Store.
  SDHS3SecretAccessKey:
    Type: String
    NoEcho: true
    Description: The AWS IAM Secret Access Key for your S3 Vora Checkpoint Store.
  SDHCertDomainName:
    Type: String
    Description: The domain you want to use for your SAP Data Hub system 
    Default: "my-sdh.com"
Mappings:
  K8sVersionMap:
    "1.12":
      STD: AMZNEKS112
      GPU: AMZNEKS112GPU
    "1.11":
      STD: AMZNEKS111
      GPU: AMZNEKS111GPU
    "1.10":
      STD: AMZNEKS110
      GPU: AMZNEKS110GPU
  InstanceTypes:
    t2.small: { Type: STD }
    t2.medium: { Type: STD }
    t2.large: { Type: STD }
    t2.xlarge: { Type: STD }
    t2.2xlarge: { Type: STD }
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    m3.medium: { Type: STD }
    m3.large: { Type: STD }
    m3.xlarge: { Type: STD }
    m3.2xlarge: { Type: STD }
    m4.large: { Type: STD }
    m4.xlarge: { Type: STD }
    m4.2xlarge: { Type: STD }
    m4.4xlarge: { Type: STD }
    m4.10xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    c4.large: { Type: STD }
    c4.xlarge: { Type: STD }
    c4.2xlarge: { Type: STD }
    c4.4xlarge: { Type: STD }
    c4.8xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    r3.xlarge: { Type: STD }
    r3.2xlarge: { Type: STD }
    r3.4xlarge: { Type: STD }
    r3.8xlarge: { Type: STD }
    r4.large: { Type: STD }
    r4.xlarge: { Type: STD }
    r4.2xlarge: { Type: STD }
    r4.4xlarge: { Type: STD }
    r4.8xlarge: { Type: STD }
    r4.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p2.xlarge: { Type: GPU }
    p2.8xlarge: { Type: GPU }
    p2.16xlarge: { Type: GPU }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  AWSAMIRegionMap:
    AMI:
      AMZNEKS112: amazon-eks-node-1.12-v20
      AMZNEKS112GPU: amazon-eks-gpu-node-1.12-v20
      AMZNEKS111: amazon-eks-node-1.11-v20
      AMZNEKS111GPU: amazon-eks-gpu-node-1.11-v20
      AMZNEKS110: amazon-eks-node-1.10-v20
      AMZNEKS110GPU: amazon-eks-gpu-node-1.10-v20
    ap-northeast-1:
      AMZNEKS110: ami-0c9fb6a3fda95d373
      AMZNEKS110GPU: ami-073f06a1edd22ae2e
      AMZNEKS111: ami-0d555d5f56c843803
      AMZNEKS111GPU: ami-07fc636e8f6d3e18b
      AMZNEKS112: ami-0bfedee6a7845c26d
      AMZNEKS112GPU: ami-08e41cc84f4b3f27f
      SLES15EKS110: ami-0e2debab987f825c8
      SLES15EKS110GPU: ami-0e2debab987f825c8
      SLES15EKS111: ami-0e2debab987f825c8
      SLES15EKS111GPU: ami-0e2debab987f825c8
      SLES15EKS112: ami-0e2debab987f825c8
      SLES15EKS112GPU: ami-0e2debab987f825c8
    ap-northeast-2:
      AMZNEKS110: ami-00ea4ea959f28b4cf
      AMZNEKS110GPU: ami-0baff950f5217e54e
      AMZNEKS111: ami-0144ae839b1111571
      AMZNEKS111GPU: ami-002057772097fcef9
      AMZNEKS112: ami-0a904348b703e620c
      AMZNEKS112GPU: ami-0c43b885e33fdc29e
      SLES15EKS110: ami-066d5639c834dd062
      SLES15EKS110GPU: ami-066d5639c834dd062
      SLES15EKS111: ami-066d5639c834dd062
      SLES15EKS111GPU: ami-066d5639c834dd062
      SLES15EKS112: ami-066d5639c834dd062
      SLES15EKS112GPU: ami-066d5639c834dd062
    ap-south-1:
      AMZNEKS110: ami-0f07478f5c5eb9e20
      AMZNEKS110GPU: ami-033bd2c2a3431923e
      AMZNEKS111: ami-02071c0110dc365ba
      AMZNEKS111GPU: ami-04fe7f4c75aac7196
      AMZNEKS112: ami-09c3eb35bb3be46a4
      AMZNEKS112GPU: ami-0d3ecaf4f3318c714
    ap-southeast-1:
      AMZNEKS110: ami-05dac5d0ada75e22f
      AMZNEKS110GPU: ami-09defa93988984fa1
      AMZNEKS111: ami-00c91afdb73cf7f93
      AMZNEKS111GPU: ami-08d5da0b12751a31f
      AMZNEKS112: ami-07b922b9b94d9a6d2
      AMZNEKS112GPU: ami-0655b4dbbe2d46703
      SLES15EKS110: ami-05e20e49e8b150b28
      SLES15EKS110GPU: ami-05e20e49e8b150b28
      SLES15EKS111: ami-05e20e49e8b150b28
      SLES15EKS111GPU: ami-05e20e49e8b150b28
      SLES15EKS112: ami-05e20e49e8b150b28
      SLES15EKS112GPU: ami-05e20e49e8b150b28
    ap-southeast-2:
      AMZNEKS110: ami-00513f18e1900ce1e
      AMZNEKS110GPU: ami-00d9364d705e902c9
      AMZNEKS111: ami-05f4510fcfe56961c
      AMZNEKS111GPU: ami-04024dd8e0b9e36ff
      AMZNEKS112: ami-0f0121e9e64ebd3dc
      AMZNEKS112GPU: ami-07079cd9ff1b312da
      SLES15EKS110: ami-05283f9ba716bfbdc
      SLES15EKS110GPU: ami-05283f9ba716bfbdc
      SLES15EKS111: ami-05283f9ba716bfbdc
      SLES15EKS111GPU: ami-05283f9ba716bfbdc
      SLES15EKS112: ami-05283f9ba716bfbdc
      SLES15EKS112GPU: ami-05283f9ba716bfbdc
    eu-central-1:
      AMZNEKS110: ami-03bdf8079f6c013c5
      AMZNEKS110GPU: ami-0a8536a894bd4ea06
      AMZNEKS111: ami-0c2709025eb548246
      AMZNEKS111GPU: ami-0bf09c13f4204ce9d
      AMZNEKS112: ami-0d741ed58ca5b342e
      AMZNEKS112GPU: ami-0c57db5b204001099
      SLES15EKS110: ami-049da412f8aa4402a
      SLES15EKS110GPU: ami-049da412f8aa4402a
      SLES15EKS111: ami-049da412f8aa4402a
      SLES15EKS111GPU: ami-049da412f8aa4402a
      SLES15EKS112: ami-049da412f8aa4402a
      SLES15EKS112GPU: ami-049da412f8aa4402a
    eu-north-1:
      AMZNEKS110: ami-0be77fe86d741fc81
      AMZNEKS110GPU: ami-05baf7a6c293fe2ed
      AMZNEKS111: ami-084bd3569d08c6e67
      AMZNEKS111GPU: ami-0a1714bb5be631b59
      AMZNEKS112: ami-0c65a309fc58f6907
      AMZNEKS112GPU: ami-09354b076296f5946
      SLES15EKS110: ami-07a30c77d27e8e56e
      SLES15EKS110GPU: ami-07a30c77d27e8e56e
      SLES15EKS111: ami-07a30c77d27e8e56e
      SLES15EKS111GPU: ami-07a30c77d27e8e56e
      SLES15EKS112: ami-07a30c77d27e8e56e
      SLES15EKS112GPU: ami-07a30c77d27e8e56e
    eu-west-1:
      AMZNEKS110: ami-06368da7f495b68e9
      AMZNEKS110GPU: ami-0f6f3929a9d7a418e
      AMZNEKS111: ami-0e82e73403dd69fa3
      AMZNEKS111GPU: ami-0b4d0f56587640d5a
      AMZNEKS112: ami-08716b70cac884aaa
      AMZNEKS112GPU: ami-0fbc930681258db86
      SLES15EKS110: ami-0e9af5d23652a4a80
      SLES15EKS110GPU: ami-0e9af5d23652a4a80
      SLES15EKS111: ami-0e9af5d23652a4a80
      SLES15EKS111GPU: ami-0e9af5d23652a4a80
      SLES15EKS112: ami-0e9af5d23652a4a80
      SLES15EKS112GPU: ami-0e9af5d23652a4a80
    eu-west-2:
      AMZNEKS110: ami-0f1f2189b4741bc60
      AMZNEKS110GPU: ami-0a12396b818bc2383
      AMZNEKS111: ami-0da9aa88dd2ec8297
      AMZNEKS111GPU: ami-00e98f9e6fd2319e5
      AMZNEKS112: ami-0c7388116d474ee10
      AMZNEKS112GPU: ami-0d832fced2cfe0f7b
      SLES15EKS110: ami-0876188b59dd1fb0d
      SLES15EKS110GPU: ami-0876188b59dd1fb0d
      SLES15EKS111: ami-0876188b59dd1fb0d
      SLES15EKS111GPU: ami-0876188b59dd1fb0d
      SLES15EKS112: ami-0876188b59dd1fb0d
      SLES15EKS112GPU: ami-0876188b59dd1fb0d
    eu-west-3:
      AMZNEKS110: ami-03a9acb0f6e0d424d
      AMZNEKS110GPU: ami-086d5edcaacd0ccfd
      AMZNEKS111: ami-099369bc73d1cc66f
      AMZNEKS111GPU: ami-0039e2556e6290828
      AMZNEKS112: ami-0560aea042fec8b12
      AMZNEKS112GPU: ami-0f8fa088b406ebba2
      SLES15EKS110: ami-0ae7860e976047351
      SLES15EKS110GPU: ami-0ae7860e976047351
      SLES15EKS111: ami-0ae7860e976047351
      SLES15EKS111GPU: ami-0ae7860e976047351
      SLES15EKS112: ami-0ae7860e976047351
      SLES15EKS112GPU: ami-0ae7860e976047351
    us-east-1:
      AMZNEKS110: ami-03a1e71fb42fc37dd
      AMZNEKS110GPU: ami-00f74c3728d4ca27d
      AMZNEKS111: ami-02c1de421df89c58d
      AMZNEKS111GPU: ami-06ec2ea207616c078
      AMZNEKS112: ami-0abcb9f9190e867ab
      AMZNEKS112GPU: ami-0cb7959f92429410a
      SLES15EKS110: ami-0f26c5cd74a4707b4
      SLES15EKS110GPU: ami-0f26c5cd74a4707b4
      SLES15EKS111: ami-0f26c5cd74a4707b4
      SLES15EKS111GPU: ami-0f26c5cd74a4707b4
      SLES15EKS112: ami-0f26c5cd74a4707b4
      SLES15EKS112GPU: ami-0f26c5cd74a4707b4
    us-east-2:
      AMZNEKS110: ami-093d55c2ba99ab2c8
      AMZNEKS110GPU: ami-0a788defb66cdfffb
      AMZNEKS111: ami-03b1b6cc34c010f9c
      AMZNEKS111GPU: ami-0e6993a35aae3407b
      AMZNEKS112: ami-04ea7cb66af82ae4a
      AMZNEKS112GPU: ami-0118b61dc2312dee2
      SLES15EKS110: ami-0eecb5f7387df7711
      SLES15EKS110GPU: ami-0eecb5f7387df7711
      SLES15EKS111: ami-0eecb5f7387df7711
      SLES15EKS111GPU: ami-0eecb5f7387df7711
      SLES15EKS112: ami-0eecb5f7387df7711
      SLES15EKS112GPU: ami-0eecb5f7387df7711
    us-west-2:
      AMZNEKS110: ami-05a71d034119ffc12
      AMZNEKS110GPU: ami-0901518d7557125c8
      AMZNEKS111: ami-05ecac759c81e0b0c
      AMZNEKS111GPU: ami-08377056d89909b2a
      AMZNEKS112: ami-0923e4b35a30a5f53
      AMZNEKS112GPU: ami-0bebf2322fd52a42e
      SLES15EKS110: ami-0ee8adc50e1dca1c3
      SLES15EKS110GPU: ami-0ee8adc50e1dca1c3
      SLES15EKS111: ami-0ee8adc50e1dca1c3
      SLES15EKS111GPU: ami-0ee8adc50e1dca1c3
      SLES15EKS112: ami-0ee8adc50e1dca1c3
      SLES15EKS112GPU: ami-0ee8adc50e1dca1c3
Conditions: 
  CreateECR: !Equals [ !Ref SDHEcrRepo, true ]
Resources:
  SDHCopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination (for SDH objects)
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'SDHCopyZipsRole.Arn'
      Timeout: 600
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          
          
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          
          
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          
          
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          
          
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  SDHLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  SDHCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${SDHLambdaZipsBucket}/${QSS3KeyPrefix}*'
  SDHCopyZips:
    Type: Custom::SDHCopyZips
    Properties:
      ServiceToken: !GetAtt 'SDHCopyZipsFunction.Arn'
      DestBucket: !Ref 'SDHLambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/CleanupERCRepoELB/lambda.zip
  SDHCleanUpLambdaFunction:
    DependsOn: 
      - SDHCopyZips
      - SDHInstance
      - ECRVoraDqp
      - ECRVoraDqpText
      - ECRSparkDSDist
      - ECRBaseOpenSUSE
      - ECRVoraDeplyOp
      - ECRSecurityOp
      - ECRInitSecurity
      - ECRUaa
      - ECROpenSuseLeap
      - ECRVsystemVrep
      - ECRVsystem
      - ECRVsystemAuth
      - ECRVsystemTeardown
      - ECRVsystemModLoader
      - ECRAppBase
      - ECRFlowAgent
      - ECRVoraLicMan
      - ECRVsystemSharedUi
      - ECRVsystemUi
      - ECRVsystemVoraAdapt
      - ECRESOss
      - ECRFluentd
      - ECRFluentdKub
      - ECRGrafana
      - ECRGrafana1
      - ECRKibana
      - ECRKubeStateMetrics
      - ECRKubeStateMetrics1
      - ECRNginx
      - ECRPromAlertManager
      - ECRPromNodeExp
      - ECRLinuxNodeExp
      - ECRPrometheus
      - ECRPrometheus1
      - ECRPromPushGateway
      - ECRConsul
      - ECRNatsStreaming
      - ECRNats
      - ECRVoraHelloWorld
      - ECRHelloSAP
      - ECRStorageGateway
      - ECRAuthProxy
      - ECRDQInt
      - ECRElasticSearch
      - ECRFACodegen
      - ECRFAOperator
      - ECRFAService
      - ECRFluentd
      - ECRGrafana
      - ECRKibanaOSS
      - ECRPushGateway
      - ECRVflowP36
      - ECRVsolGo 
      - ECRVsolHSR
      - ECRVsolML
      - ECRVsolJVM
      - ECRVsolStreaming
      - ECRVsolText
      - ECRVsystemHANAInit
      - ECRKanikoPE
    Type: AWS::Lambda::Function
    Properties:
      Description: Cleans Up ECR images and ELB created by SDH installation upon Stack Delete
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'SDHIAMLambdaRole.Arn'
      Timeout: 600
      Code: 
        S3Bucket: !Ref SDHLambdaZipsBucket
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupERCRepoELB/lambda.zip'
  SDHCleanUpLambda:
    DependsOn: SDHCleanUpLambdaFunction
    Type: Custom::SDHCleanUpLambda
    Properties:
      ServiceToken: !GetAtt 'SDHCleanUpLambdaFunction.Arn'
  SDHIAMLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SDHCleanup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:Describe*
                  - ecr:ListTagsForResource
                  - ecr:ListImages
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:*Delete*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/com.sap*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/elasticsearch*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/fabric8*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/grafana*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/kibana*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*kube*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/nginx*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/prom*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/consul*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/nats*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/vora*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/kaniko*"
              - Effect: Allow
                Action:
                  - ecr:*Delete*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/vsolution*"
  SDHInstance:
    DependsOn: SDHNetworkInterface
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Authentication:  
        S3AccessCreds: 
          type: S3
          bucket: !Ref QSS3BucketName
          roleName: !Ref SDHIAMRole
      AWS::CloudFormation::Init: 
        config:
          files: 
            "/root/install/config":
               content: !Join ['', ['[#config]

                    ', export EKS_CLUSTER_NAME=, !Ref 'EKSClusterName', '

                    ', export EKS_CLUSTER_VERSION=, !Ref 'KubernetesVersion', '

                    ', export SDH_CREATEECR=, !Ref 'SDHEcrRepo', '

                    ', export SDH_INSTALL=, !Ref 'SDHInstall', '

                    ', export SDH_VERSION=, !Ref 'SDHVersion', '

                    ', export SDH_CHECKPOINT_STORE=, !Ref 'SDHCheckPointS3Bucket', '
                    
                    ', export SDHSwS3BucketName=, !Ref 'SDHSwS3BucketName', '

                    ', export SDHSwS3PrefixName=, !Ref 'SDHSwS3PrefixName', '

                    ', export SDH_IAM_ROLE_ARN=, !Ref 'SDHIAMRoleArn', '

                    ', export SDH_S_USERID=, !Ref 'SDHSUserId', '

                    ', export SDH_S_USER_PASS=, !Ref 'SDHSUserPass', '

                    ', export SDH_VORA_PASS=, !Ref 'SDHVoraPass', '

                    ', export SDH_S_USER_TYPE=, !Ref 'SDHSUserType', '
                    
                    ', export SDH_ACCESS_KEY=, !Ref 'SDHS3AccessKey', '

                    ', export SDH_SECRET_ACCESS_KEY=, !Ref 'SDHS3SecretAccessKey', '

                    ', export SDH_NAME_SPACE=, !Ref 'SDHNameSpace', '

                    ', export SDH_ELB_PRIVPUB=, !Ref 'SDHELBPrivatePublic', '

                    ', export SDH_CERT_DOMAIN_NAME=, !Ref 'SDHCertDomainName', '

                    ', export WAITFORSDHINSTALLWAITHANDLE=, !Sub '"${WaitForSDHInstallWaitHandle}"', '

                    ', export AWS_ACCT=, !Ref 'AWS::AccountId', '

                    ', export REGION=, !Ref 'AWS::Region', '

                    ', export STACK_ID=, !Ref 'AWS::StackId', '
                    ']]
               mode: 000500
               owner: root
               group: root                
            "/root/install/helm.yaml": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/helm.yaml'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/ingress.yaml": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/ingress.yaml'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/private-elb.yaml": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/private-elb.yaml'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/sdh-install.sh": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/sdh-install.sh'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/signal-final-status.sh": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/signal-final-status.sh'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/storage-class.yaml": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/storage-class.yaml'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
          commands: 
              startinstall: 
                command: "dos2unix /root/install/sdh-install.sh; bash -xv /root/install/sdh-install.sh"
    Properties:
      InstanceType: !Ref NodeInstanceTypeSDH
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref SDHNetworkInterface
          DeviceIndex: 0
      IamInstanceProfile: !Ref SDHIAMProfile
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - !FindInMap
          - K8sVersionMap
          - !Ref KubernetesVersion
          - !FindInMap
            - InstanceTypes
            - !Ref NodeInstanceTypeSDH
            - Type
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSizeSDH
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: "SAP Data Hub Installation Host"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          mkdir -p /root/install
          chown root /root
          chown root /root/install
          chmod 700 /root/install
          yum -y install dos2unix
          #Start the dowload and installation of the SAP Data Hub
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SDHInstance --region ${AWS::Region}
  SDHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref RemoteAccessCIDR
  SDHNetworkInterface:
    DependsOn: SDHSecurityGroup
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PrivateSubnet1ID
      Description: Primary ENI for SDH Installation Host
      GroupSet: 
      - !Ref SDHSecurityGroup
      SourceDestCheck: true
      Tags:
        -
          Key: Name
          Value: SDH Installation Host ENI
  WaitForSDHInstallWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  WaitForSDHInstall:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: SDHInstance
    Properties:
      Handle: !Ref WaitForSDHInstallWaitHandle
      Timeout: '40000'
  ECRStorageGateway:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.bds.docker/storagegateway"
  ECRAuthProxy:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/auth-proxy"
  ECRDQInt:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/dq-integration"
  ECRElasticSearch:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/elasticsearch"
  ECRFACodegen:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/flowagent-codegen"
  ECRFAOperator:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/flowagent-operator"
  ECRFAService:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/flowagent-service"
  ECRFluentd:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/fluentd"
  ECRGrafana:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/grafana"
  ECRKibana:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/kibana"
  ECRPushGateway:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/pushgateway"
  ECRVflowP36:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vflow-python36"
  ECRVsolGo:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsolution-golang"
  ECRVsolHSR:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsolution-hana_replication"
  ECRVsolML:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsolution-ml-python"
  ECRVsolJVM:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsolution-sapjvm"
  ECRVsolStreaming:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsolution-streaming"
  ECRVsolText:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsolution-textanalysis"
  ECRVsystemHANAInit:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-hana-init"
  ECRKanikoPE:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "kaniko-project/executor"
  ECRVoraDqp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-dqp"
  ECRVoraDqpText:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-dqp-textanalysis"
  ECRSparkDSDist:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/spark-datasourcedist"
  ECRBaseOpenSUSE:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.hana.container/base-opensuse42.3-amd64"
  ECRVoraDeplyOp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-deployment-operator"
  ECRSecurityOp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/security-operator"
  ECRInitSecurity:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/init-security"
  ECRUaa:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/uaa"
  ECROpenSuseLeap:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/opensuse-leap"
  ECRVsystemVrep:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-vrep"
  ECRVsystem:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem"
  ECRVsystemAuth:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-auth"
  ECRVsystemTeardown:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-teardown"
  ECRVsystemModLoader:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-module-loader"
  ECRAppBase:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/app-base"
  ECRFlowAgent:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/flowagent"
  ECRVoraLicMan:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-license-manager"
  ECRVsystemSharedUi:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-shared-ui"
  ECRVsystemUi:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-ui"
  ECRVsystemVoraAdapt:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-voraadapter"
  ECRESOss:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "elasticsearch/elasticsearch-oss"
  ECRFluentdKub:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "fabric8/fluentd-kubernetes"
  ECRGrafana1:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "grafana/grafana"
  ECRKibanaOSS:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "kibana/kibana-oss"
  ECRKubeStateMetrics1:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "google_containers/kube-state-metrics"
  ECRKubeStateMetrics:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/kube-state-metrics"
  ECRNginx:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "nginx"
  ECRPromAlertManager:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/alertmanager"
  ECRPromNodeExp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/node-exporter"
  ECRLinuxNodeExp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/node-exporter"
  ECRPrometheus1:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/prometheus"
  ECRPrometheus:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/prometheus"
  ECRPromPushGateway:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/pushgateway"
  ECRConsul:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "consul"
  ECRNatsStreaming:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "nats-streaming"
  ECRNats:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/nats"
  ECRVoraHelloWorld:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "vora/hello-world"
  ECRHelloSAP:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/hello-sap"
Outputs:
  SDHInstHostIpAddress:
    Value: !GetAtt SDHNetworkInterface.PrimaryPrivateIpAddress

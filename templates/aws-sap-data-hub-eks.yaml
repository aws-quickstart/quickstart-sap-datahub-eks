AWSTemplateFormatVersion: "2010-09-09"
Description: SAP Data Hub on Amazon EKS (qs-xxx)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - RemoteAccessCIDR
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
      - Label:
          default: EKS configuration
        Parameters:
          - EKSClusterName
          - KubernetesVersion
          - SDHIAMProfile
          - SDHIAMRole
      - Label:
          default: SDH Installation Host configuration
        Parameters:
          - SDHVersion
          - SDHSwS3BucketName
          - SDHSwS3PrefixName
          - SDHEcrRepo
          - SDHSUserId
          - SDHSUserPass
          - SDHVoraPass
          - SDHNameSpace
          - SDHCertDomainName
          - NodeInstanceTypeSDH
          - NodeVolumeSizeSDH
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      EKSClusterName:
        default: EKS Cluster Name
      KeyPairName:
        default: SSH key name
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      RemoteAccessCIDR:
        default: Allowed external access CIDR for your SDH Installation Host
      NodeInstanceTypeSDH:
        default: SDH Installation Host instance type
      SDHIAMProfile:
        default: Name of an existing IAM Profile with rights to access EKS cluster
      SDHIAMRole:
        default: Name of an existing IAM Role with rights to access EKS cluster
      NumberOfNodes:
        default: Number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSizeSDH:
        default: Node volume size
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      VPCID:
        default: VPC ID
      KubernetesVersion:
        default: Kubernetes version
      SDHVersion:
        default: SAP Data Hub version
      SDHSwS3BucketName:
        default: S3 Bucket name of SAP Data Hub s/w
      SDHSwS3PrefixName:
        default: S3 Prefix name of SAP Data Hub s/w
      SDHEcrRepo:
        default: Create AWS ECR repo for SAP Data Hub
      SDHNameSpace:
        default: Kubernetes Name Space for your SAP Data Hub system
      SDHSUserId:
        default: SAP S-User Id.
      SDHSUserPass:
        default: SAP S-User Password
      SDHVoraPass:
        default: SAP Data Hub Vora user's Password
      SDHCertDomainName:
        default: SAP Data Hub Domain Name
Parameters:
  EKSClusterName:
    Description: The name of an existing EKS Cluster
    Type: String
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you
      to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  NodeInstanceTypeSDH:
    Default: r4.xlarge
    AllowedValues:
      - t2.2xlarge
      - t3.2xlarge
      - m4.2xlarge
      - m5.2xlarge
      - i3.xlarge
      - r3.xlarge
      - r4.xlarge
      - r4.2xlarge
      - r5.xlarge
      - r5.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the SDH Installation Host instance
    Type: String
  NodeVolumeSizeSDH:
    Default: 40
    Description: Size for SDH Installation Host root EBS volumes
    Type: String
  SDHIAMProfile:
    Description: IAM instance profile with permissions to access the EKS cluster
    Type: String
  SDHIAMRole:
    Description: IAM instance role with permissions to access the EKS cluster
    Type: String
  VPCID:
    Type: "AWS::EC2::VPC::Id"
    Description: The ID of your existing VPC (e.g., vpc-0343606e)
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: The ID of the private subnet in an Availability Zone in your existing VPC (e.g., subnet-fe9a8b32)
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.11", "1.10" ]
    Default: "1.10"
    Description: Your existing EKS version
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart-sk
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-sap-data-hub-on-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the SDH instances. We recommend that you set this value to a trusted IP range.
    Type: String
  SDHVersion:
    Type: String
    AllowedValues: [ "2.4", "2.41" ]
    Description: Configures the version of SAP Data Hub deployed in the Amazon EKS cluster
    Default: "2.4"
  SDHSwS3BucketName:
    Type: String
    Description: The name of your S3 bucket where your SAP Data Hub software is stored. Do *NOT* include s3:// (use just your bucket name)
    Default: "my-sdh-bucket"
  SDHSwS3PrefixName:
    Type: String
    Description: The name of your S3 key prefix where your SAP Data Hub software is stored.
    Default: my/sw/version/
  SDHEcrRepo:
    Type: String
    Description: "AWS ECR repo to store your SAP Data Hub images. If set to *true*, the repos will be created for you. Set to *false* if you've already created the AWS ECR repos."
    AllowedValues: [true, false]
    Default: true
  SDHNameSpace:
    Type: String
    Description: Your SAP Data Hub kubernetes Name Space
    Default: "datahub"
  SDHSUserId:
    Type: String
    Description: Your SAP SWDC login name
    Default: "S0123456789"
  SDHSUserPass:
    Type: String
    NoEcho: true
    Description: The password for your S-User. This is needed for the SDH Installation only and it not kept after being used.
  SDHVoraPass:
    Type: String
    NoEcho: true
    Description: The password for the Vora user in your SAP Data Hub system.
  SDHCertDomainName:
    Type: String
    Description: The domain you want to use for your SAP Data Hub system 
    Default: "my-sdh.com"
Mappings:
  K8sVersionMap:
    "1.11":
      STD: EKS111
      GPU: EKS111GPU
    "1.10":
      STD: EKS110
      GPU: EKS110GPU
  InstanceTypes:
    t2.small: { Type: STD }
    t2.medium: { Type: STD }
    t2.large: { Type: STD }
    t2.xlarge: { Type: STD }
    t2.2xlarge: { Type: STD }
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    m3.medium: { Type: STD }
    m3.large: { Type: STD }
    m3.xlarge: { Type: STD }
    m3.2xlarge: { Type: STD }
    m4.large: { Type: STD }
    m4.xlarge: { Type: STD }
    m4.2xlarge: { Type: STD }
    m4.4xlarge: { Type: STD }
    m4.10xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    c4.large: { Type: STD }
    c4.xlarge: { Type: STD }
    c4.2xlarge: { Type: STD }
    c4.4xlarge: { Type: STD }
    c4.8xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    r3.xlarge: { Type: STD }
    r3.2xlarge: { Type: STD }
    r3.4xlarge: { Type: STD }
    r3.8xlarge: { Type: STD }
    r4.large: { Type: STD }
    r4.xlarge: { Type: STD }
    r4.2xlarge: { Type: STD }
    r4.4xlarge: { Type: STD }
    r4.8xlarge: { Type: STD }
    r4.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p2.xlarge: { Type: GPU }
    p2.8xlarge: { Type: GPU }
    p2.16xlarge: { Type: GPU }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  AWSAMIRegionMap:
    AMI:
      EKS111: amazon-eks-node-1.11-v20
      EKS111GPU: amazon-eks-gpu-node-1.11-v20
      EKS110: amazon-eks-node-1.10-v20
      EKS110GPU: amazon-eks-gpu-node-1.10-v20
    ap-northeast-1:
      EKS111: ami-0f0e8066383e7a2cb
      EKS111GPU: ami-036b3969c5eb8d3cf
      EKS110: ami-06398bdd37d76571d
      EKS110GPU: ami-0afc9d14b2fe11ad9
    ap-northeast-2:
      EKS111: ami-0b7baa90de70f683f
      EKS111GPU: ami-0b7f163f7194396f7
      EKS110: ami-08a87e0a7c32fa649
      EKS110GPU: ami-0d75b9ab57bfc8c9a
    ap-southeast-1:
      EKS111: ami-019966ed970c18502
      EKS111GPU: ami-093f742654a955ee6
      EKS110: ami-0ac3510e44b5bf8ef
      EKS110GPU: ami-0ecce0670cb66d17b
    ap-southeast-2:
      EKS111: ami-06ade0abbd8eca425
      EKS111GPU: ami-05e09575123ff498b
      EKS110: ami-0d2c929ace88cfebe
      EKS110GPU: ami-03b048bd9d3861ce9
    eu-central-1:
      EKS111: ami-010caa98bae9a09e2
      EKS111GPU: ami-0d6f0554fd4743a9d
      EKS110: ami-08eb700778f03ea94
      EKS110GPU: ami-000622b1016d2a5bf
    eu-north-1:
      EKS111: ami-06ee67302ab7cf838
      EKS111GPU: ami-0b159b75
      EKS110: ami-068b8a1efffd30eda
      EKS110GPU: ami-cc149ab2
    eu-west-1:
      EKS111: ami-01e08d22b9439c15a
      EKS111GPU: ami-097978e7acde1fd7c
      EKS110: ami-0de10c614955da932
      EKS110GPU: ami-0dafd3a1dc43781f7
    us-east-1:
      EKS111: ami-0c24db5df6badc35a
      EKS111GPU: ami-0ff0241c02b279f50
      EKS110: ami-04358410d28eaab63
      EKS110GPU: ami-0131c0ca222183def
    us-east-2:
      EKS111: ami-0c2e8d28b1f854c68
      EKS111GPU: ami-006a12f54eaafc2b1
      EKS110: ami-0b779e8ab57655b4b
      EKS110GPU: ami-0abfb3be33c196cbf
    us-west-2:
      EKS111: ami-0a2abab4107669c1b
      EKS111GPU: ami-0c9e5e2d8caa9fb5e
      EKS110: ami-09e1df3bad220af0b
      EKS110GPU: ami-0ebf0561e61a2be02
Conditions: 
  CreateECR: !Equals [ !Ref SDHEcrRepo, true ]
Resources:
  SDHInstance:
    DependsOn: SDHNetworkInterface
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Authentication:  
        S3AccessCreds: 
          type: S3
          bucket: !Ref QSS3BucketName
          roleName: !Ref SDHIAMRole
      AWS::CloudFormation::Init: 
        config:
          files: 
            "/root/install/config":
               content: !Join ['', ['[#config]

                    ', export EKS_CLUSTER_NAME=, !Ref 'EKSClusterName', '

                    ', export EKS_CLUSTER_VERSION=, !Ref 'KubernetesVersion', '

                    ', export SDH_VERSION=, !Ref 'SDHVersion', '

                    ', export SDHSwS3BucketName=, !Ref 'SDHSwS3BucketName', '

                    ', export SDHSwS3PrefixName=, !Ref 'SDHSwS3PrefixName', '

                    ', export SDH_S_USERID=, !Ref 'SDHSUserId', '

                    ', export SDH_S_USER_PASS=, !Ref 'SDHSUserPass', '

                    ', export SDH_VORA_PASS=, !Ref 'SDHVoraPass', '

                    ', export SDH_NAME_SPACE=, !Ref 'SDHNameSpace', '

                    ', export SDH_CERT_DOMAIN_NAME=, !Ref 'SDHCertDomainName', '

                    ', export WAITFORSDHINSTALLWAITHANDLE=, !Ref 'WaitForSDHInstallWaitHandle', '

                    ', export REGION=, !Ref 'AWS::Region', '
                    ']]
               mode: 000500
               owner: root
               group: root                
            "/root/install/sdh-install.sh": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/sdh-install.sh'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/signal-final-status.sh": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/signal-final-status.sh'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/helm.yaml": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/helm.yaml'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/ingress.yaml": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/ingress.yaml'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
            "/root/install/storage-class.yaml": 
               source: !Sub 'http://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/storage-class.yaml'
               mode: 000500
               owner: root
               group: root
               authentication: S3AccessCreds
          commands: 
              startinstall: 
                command: "dos2unix /root/install/sdh-install.sh; bash /root/install/sdh-install.sh"
    Properties:
      InstanceType: !Ref NodeInstanceTypeSDH
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref SDHNetworkInterface
          DeviceIndex: 0
      IamInstanceProfile: !Ref SDHIAMProfile
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - !FindInMap
          - K8sVersionMap
          - !Ref KubernetesVersion
          - !FindInMap
            - InstanceTypes
            - !Ref NodeInstanceTypeSDH
            - Type
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSizeSDH
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: "SAP Data Hub Installation Host"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          mkdir -p /root/install
          chown root /root
          chown root /root/install
          chmod 700 /root/install
          yum -y install dos2unix
          #Start the dowload and installation of the SAP Data Hub
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SDHInstance --region ${AWS::Region}
  SDHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref RemoteAccessCIDR
  SDHNetworkInterface:
    DependsOn: SDHSecurityGroup
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PrivateSubnet1ID
      Description: Primary ENI for SDH Installation Host
      GroupSet: 
      - !Ref SDHSecurityGroup
      SourceDestCheck: true
      Tags:
        -
          Key: Name
          Value: SDH Installation Host ENI
  WaitForSDHInstallWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  WaitForSDHInstall:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: SDHInstance
    Properties:
      Handle: !Ref WaitForSDHInstallWaitHandle
      Timeout: '4500'
  ECRVoraDqp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-dqp"
  ECRVoraDqpText:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-dqp-textanalysis"
  ECRSparkDSDist:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/spark-datasourcedist"
  ECRBaseOpenSUSE:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.hana.container/base-opensuse42.3-amd64"
  ECRVoraDeplyOp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-deployment-operator"
  ECRSecurityOp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/security-operator"
  ECRInitSecurity:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/init-security"
  ECRUaa:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/uaa"
  ECROpenSuseLeap:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/opensuse-leap"
  ECRVsystemVrep:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-vrep"
  ECRVsystem:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem"
  ECRVsystemAuth:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-auth"
  ECRVsystemTeardown:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-teardown"
  ECRVsystemModLoader:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-module-loader"
  ECRAppBase:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/app-base"
  ECRFlowAgent:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/flowagent"
  ECRVoraLicMan:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vora-license-manager"
  ECRVsystemSharedUi:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-shared-ui"
  ECRVsystemUi:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-ui"
  ECRVsystemVoraAdapt:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "com.sap.datahub.linuxx86_64/vsystem-voraadapter"
  ECRESOss:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "elasticsearch/elasticsearch-oss"
  ECRFluentd:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "fabric8/fluentd-kubernetes"
  ECRGrafana:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "grafana/grafana"
  ECRKibana:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "kibana/kibana-oss"
  ECRKubeStateMetrics:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "google_containers/kube-state-metrics"
  ECRNginx:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "nginx"
  ECRPromAlertManager:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/alertmanager"
  ECRPromNodeExp:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/node-exporter"
  ECRPrometheus:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/prometheus"
  ECRPromPushGateway:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "prom/pushgateway"
  ECRConsul:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "consul"
  ECRNatsStreaming:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "nats-streaming"
  ECRVoraHelloWorld:
    Condition: CreateECR
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "vora/hello-world"
